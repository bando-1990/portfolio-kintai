openapi: 3.0.3
info:
  title: 勤怠管理API
  version: 0.1.0
  description: >
    勤怠（出勤/退勤/休憩）、修正申請、集計、認証を提供。
    冪等性: 書き込み系は Idempotency-Key を推奨。
servers:
  - url: https://api.example.com/v1
tags:
  - name: Auth
  - name: Users
  - name: Attendance
  - name: Corrections
  - name: Reports
  - name: Ops

paths:
  /auth/login:
    post:
      tags: [Auth]
      summary: ログイン（JWT発行）
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginRequest' }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/LoginResponse' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /auth/logout:
    post:
      tags: [Auth]
      summary: ログアウト（サーバ側トークン失効）
      security: [{ bearerAuth: [] }]
      responses:
        '204': { description: No Content }

  /me:
    get:
      tags: [Users]
      summary: 自分のユーザー情報
      security: [{ bearerAuth: [] }]
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }

  /users:
    get:
      tags: [Users]
      summary: ユーザー一覧（管理者）
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query; name: q; schema: { type: string }; description: 部分一致検索
        - in: query; name: page; schema: { type: integer, minimum: 1, default: 1 }
        - in: query; name: size; schema: { type: integer, minimum: 1, maximum: 200, default: 50 }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PageUser' } } } }
    post:
      tags: [Users]
      summary: ユーザー作成（管理者）
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/UserCreate' } } }
      responses:
        '201': { description: Created, headers: { Location: { schema: { type: string } } }, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '409': { $ref: '#/components/responses/Conflict' }

  /users/{userId}:
    get:
      tags: [Users]
      summary: ユーザー取得（管理者）
      security: [{ bearerAuth: [] }]
      parameters: [ { in: path, name: userId, required: true, schema: { type: string } } ]
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '404': { $ref: '#/components/responses/NotFound' }
    patch:
      tags: [Users]
      summary: ユーザー更新（管理者）
      security: [{ bearerAuth: [] }]
      parameters: [ { in: path, name: userId, required: true, schema: { type: string } } ]
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/UserUpdate' } } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
    delete:
      tags: [Users]
      summary: ユーザー削除（管理者）
      security: [{ bearerAuth: [] }]
      parameters: [ { in: path, name: userId, required: true, schema: { type: string } } ]
      responses:
        '204': { description: No Content }

  /attendance/clock-in:
    post:
      tags: [Attendance]
      summary: 出勤打刻（冪等）
      security: [{ bearerAuth: [] }]
      parameters:
        - in: header; name: Idempotency-Key; required: true; schema: { type: string, minLength: 8, maxLength: 128 }
        - in: header; name: X-Request-Id; required: false; schema: { type: string }
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/ClockInRequest' } } }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/AttendanceRecord' } } } }
        '409': { $ref: '#/components/responses/Conflict' }

  /attendance/clock-out:
    post:
      tags: [Attendance]
      summary: 退勤打刻（冪等）
      security: [{ bearerAuth: [] }]
      parameters:
        - in: header; name: Idempotency-Key; required: true; schema: { type: string }
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/ClockOutRequest' } } }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/AttendanceRecord' } } } }
        '409': { $ref: '#/components/responses/Conflict' }

  /attendance/records:
    get:
      tags: [Attendance]
      summary: 勤怠レコード取得（期間）
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query; name: userId; schema: { type: string }
        - in: query; name: from; schema: { type: string, format: date }
        - in: query; name: to; schema: { type: string, format: date }
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/AttendanceRecord' } } } } }

  /attendance/corrections:
    post:
      tags: [Corrections]
      summary: 勤怠修正申請の作成
      security: [{ bearerAuth: [] }]
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/CorrectionCreate' } } } }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Correction' } } } }
    get:
      tags: [Corrections]
      summary: 修正申請一覧（申請者=自分 / 承認者=自分 で絞込）
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query; name: role; schema: { type: string, enum: [applicant, approver] }
        - in: query; name: status; schema: { type: string, enum: [pending, approved, rejected] }
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Correction' } } } } }

  /attendance/corrections/{id}/approve:
    post:
      tags: [Corrections]
      summary: 修正承認
      security: [{ bearerAuth: [] }]
      parameters: [ { in: path, name: id, required: true, schema: { type: string } } ]
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/ApprovalAction' } } } }
      responses: { '200': { description: OK } }

  /attendance/corrections/{id}/reject:
    post:
      tags: [Corrections]
      summary: 修正却下
      security: [{ bearerAuth: [] }]
      parameters: [ { in: path, name: id, required: true, schema: { type: string } } ]
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/ApprovalAction' } } } }
      responses: { '200': { description: OK } }

  /reports/summary/daily:
    get:
      tags: [Reports]
      summary: 日次サマリ
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query; name: date; schema: { type: string, format: date }
        - in: query; name: userId; schema: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/DailySummary' } } } }

  /health:
    get:
      tags: [Ops]
      summary: ヘルスチェック
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: object, properties: { status: { type: string }, version: { type: string } } } } } }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    Unauthorized: { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    NotFound: { description: Not Found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    Conflict: { description: Conflict, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
  schemas:
    LoginRequest:
      type: object
      required: [loginId, password]
      properties:
        loginId: { type: string, maxLength: 100 }
        password: { type: string, format: password }
    LoginResponse:
      type: object
      properties:
        accessToken: { type: string }
        tokenType: { type: string, example: Bearer }
        expiresIn: { type: integer }
        user: { $ref: '#/components/schemas/User' }

    User:
      type: object
      required: [id, name, roles]
      properties:
        id: { type: string, format: uuid }
        loginId: { type: string }
        name: { type: string }
        email: { type: string, format: email, nullable: true }
        roles: { type: array, items: { type: string, enum: [ADMIN, MANAGER, MEMBER] } }
        active: { type: boolean }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    PageUser:
      type: object
      properties:
        items: { type: array, items: { $ref: '#/components/schemas/User' } }
        page: { type: integer }
        size: { type: integer }
        total: { type: integer }

    UserCreate:
      type: object
      required: [loginId, name, password]
      properties:
        loginId: { type: string }
        name: { type: string }
        email: { type: string, format: email, nullable: true }
        password: { type: string, minLength: 8 } # ハッシュはサーバで生成（BCrypt/Argon2）
        roles: { type: array, items: { type: string } }

    UserUpdate:
      type: object
      properties:
        name: { type: string }
        email: { type: string, format: email, nullable: true }
        active: { type: boolean }
        roles: { type: array, items: { type: string } }

    ClockInRequest:
      type: object
      properties:
        at: { type: string, format: date-time, description: クライアント時刻（任意）。未指定時はサーバ時刻 }
        note: { type: string, maxLength: 200, nullable: true }
        geo: { type: object, nullable: true, properties: { lat: { type: number }, lon: { type: number } } }

    ClockOutRequest:
      type: object
      properties:
        at: { type: string, format: date-time }
        note: { type: string, maxLength: 200, nullable: true }

    AttendanceRecord:
      type: object
      properties:
        id: { type: string, format: uuid }
        userId: { type: string, format: uuid }
        workDate: { type: string, format: date }
        clockInAt: { type: string, format: date-time, nullable: true }
        clockOutAt: { type: string, format: date-time, nullable: true }
        status: { type: string, enum: [未出勤, 勤務中, 勤務完了] }
        source: { type: string, enum: [WEB, MOBILE, ADMIN, CORRECTION] }
        grossWorkMinutes: { type: integer, description: 出退勤差（分） }
        autoBreakMinutes: { type: integer, description: 自動控除した休憩（分） }
        netWorkMinutes:   { type: integer, description: 実労働時間 = gross - autoBreak }
        calcPolicyCode:   { type: string, description: 適用した休憩ポリシID/バージョン }
        calcAt:           { type: string, format: date-time, description: 再計算時刻 }
        notes: { type: string, nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    CorrectionCreate:
      type: object
      required: [recordId, reason]
      properties:
        recordId: { type: string, format: uuid }
        patch:
          type: object
          description: 出退勤時刻などの差分。承認時に再計算。
          properties:
            clockInAt:  { type: string, format: date-time, nullable: true }
            clockOutAt: { type: string, format: date-time, nullable: true }
            notes:      { type: string, nullable: true }
        reason: { type: string, maxLength: 500 }

    Correction:
      type: object
      properties:
        id: { type: string, format: uuid }
        recordId: { type: string, format: uuid }
        applicantId: { type: string, format: uuid }
        approverId: { type: string, format: uuid, nullable: true }
        status: { type: string, enum: [pending, approved, rejected] }
        reason: { type: string }
        reviewerComment: { type: string, nullable: true }
        createdAt: { type: string, format: date-time }
        decidedAt: { type: string, format: date-time, nullable: true }

    ApprovalAction:
      type: object
      properties:
        comment: { type: string, maxLength: 500 }

    DailySummary:
      type: object
      properties:
        date: { type: string, format: date }
        userId: { type: string, format: uuid }
        totalWorkMinutes: { type: integer }
        totalBreakMinutes: { type: integer }
        overtimeMinutes: { type: integer }

    Error:
      type: object
      required: [code, message]
      properties:
        code:
          type: string
          description: |
            エラーコード:
              AUTH-001: 認証失敗
              ATT-409: 状態不整合（例：退勤前に休憩終了が未入力）
              IDEMP-409: 冪等キー重複
              VAL-400: バリデーションエラー
              NOT-404: 対象が存在しない
        message: { type: string }
        details: { type: object, additionalProperties: true, nullable: true }
